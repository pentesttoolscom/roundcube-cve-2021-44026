from shodan.helpers import iterate_files, open_file, write_banner
import pandas as pd
import requests 
import argparse
import urllib3
import json
import threading
from concurrent.futures import ThreadPoolExecutor



def generate_dataframe(input_data):
    df = pd.DataFrame(input_data, columns=['ip_str', 'port', 'country'])
    print("Duplicates: ", df.duplicated().sum())
    df = df.drop_duplicates()
    return df


def verify_version(ip_str, port):
    try:
        r = requests.get(f'https://{ip_str}:{port}/CHANGELOG'.format(ip_str=ip_str, port=port), verify=False, timeout=5)
        return r.status_code == 200 and 'CHANGELOG' in r.text
    except requests.exceptions.ConnectionError:
        return False
    except TimeoutError:
        return False
    except urllib3.exceptions.SSLError:
        r = requests.get(f'http://{ip_str}:{port}/CHANGELOG'.format(ip_str=ip_str, port=port), verify=False, timeout=5)
        return r.status_code == 200 and 'CHANGELOG' in r.text
    except Exception as e:
        return False


def filter_censys_files(censys_files):
    chart_data = []

    for file in censys_files:
        file = open(file, 'rb')
        for line in file:
            for banner in json.loads(line): 
                ip_str = banner['ip']
                port = '443'
                country = banner.get('location', {}).get('country_name', 'Unknown')
                if verify_version(ip_str, port):
                    print(f'{ip_str}:{port} - CENSYS')
                    chart_data.append([ip_str, port, country])
        
    return chart_data

def filter_shodan_files(shodan_files):
    chart_data = []
    OUTPUT_SHODAN_FILENAME = 'filtered_shodan.json.gz'

    with open_file(OUTPUT_SHODAN_FILENAME) as fout:
        for banner in iterate_files(shodan_files):
            ip_str = banner['ip_str']
            port = banner['port']
            country = banner.get('location', {}).get('country_name', 'Unknown')

            if verify_version(ip_str, port):
                write_banner(fout, banner)
                print(f'{ip_str}:{port} - SHODAN')
                chart_data.append([ip_str, port, country])

    return chart_data
            
    


def main():
    parser = argparse.ArgumentParser(description='Parse Shodan and Censys data')

    # Correct the argument configurations
    parser.add_argument('--shodan', help='Parse Shodan data', type=str, nargs='+', metavar='file.json[.gz]')
    parser.add_argument('--censys', help='Parse Censys data', type=str, nargs='+', metavar='file.json[.gz]')
    parser.add_argument('--save', action='store_true', help='Save dataframes to CSV files', default=True)

    parser.print_usage

    args = parser.parse_args()

    chart_data = []
    with ThreadPoolExecutor(max_workers=2) as executor:
        futures = []
        if args.shodan:
            futures.append(executor.submit(filter_shodan_files, args.shodan))
        if args.censys:
            futures.append(executor.submit(filter_censys_files, args.censys))
        
        for future in futures:
            chart_data.extend(future.result())


    if args.save:
        df = generate_dataframe(chart_data)  # Ensure this function is defined
        df.to_csv('dataframe.csv', index=False)

if __name__ == '__main__':
    main()










